diff -ruN glucose-syrup-4.1/core/Solver.cc glucose-syrup-4.1.new/core/Solver.cc
--- glucose-syrup-4.1/core/Solver.cc	2016-12-08 13:48:26.000000000 +0100
+++ glucose-syrup-4.1.new/core/Solver.cc	2020-04-04 13:36:42.000000000 +0200
@@ -122,9 +122,10 @@
 
 Solver::Solver() :
 
+termCallback (NULL), learnCallbackBuffer (NULL), learnCallback (NULL)
 // Parameters (user settable):
 //
-verbosity(0)
+, verbosity(0)
 , showModel(0)
 , K(opt_K)
 , R(opt_R)
@@ -314,6 +315,7 @@
 
 
 Solver::~Solver() {
+    free(this->learnCallbackBuffer);
 }
 
 
@@ -1552,6 +1554,14 @@
                 }
             }
 
+            if (learnCallback != 0 && learnt_clause.size() <= learnCallbackLimit) {
+              for (int i = 0; i < learnt_clause.size(); i++) {
+                Lit lit = learnt_clause[i];
+                learnCallbackBuffer[i] = sign(lit) ? -(var(lit)+1) : (var(lit)+1);
+              }
+              learnCallbackBuffer[learnt_clause.size()] = 0;
+              learnCallback(learnCallbackState, learnCallbackBuffer);
+            }
 
             if(learnt_clause.size() == 1) {
                 uncheckedEnqueue(learnt_clause[0]);
@@ -1974,7 +1984,7 @@
     ClauseAllocator to(ca.size() - ca.wasted());
     relocAll(to);
     if(verbosity >= 2)
-        printf("|  Garbage collection:   %12d bytes => %12d bytes             |\n",
+        printf("c [glucose-syrup4.1] |  Garbage collection:   %12d bytes => %12d bytes             |\n",
                ca.size() * ClauseAllocator::Unit_Size, to.size() * ClauseAllocator::Unit_Size);
     to.moveTo(ca);
 }
diff -ruN glucose-syrup-4.1/core/Solver.h glucose-syrup-4.1.new/core/Solver.h
--- glucose-syrup-4.1/core/Solver.h	2016-12-08 13:48:26.000000000 +0100
+++ glucose-syrup-4.1.new/core/Solver.h	2020-04-04 13:36:23.000000000 +0200
@@ -106,6 +106,25 @@
     Solver(const  Solver &s);
     
     virtual ~Solver();
+
+    void* termCallbackState;
+    int (*termCallback)(void* state);
+    void setTermCallback(void* state, int (*termCallback)(void*)) {
+       this->termCallbackState = state;
+       this->termCallback = termCallback;
+    }
+
+    void* learnCallbackState;
+    int* learnCallbackBuffer;
+    int learnCallbackLimit;
+    void (*learnCallback)(void * state, int * clause);
+    void setLearnCallback(void * state, int maxLength, void (*learn)(void * state, int * clause)) {
+      this->learnCallbackState = state;
+      this->learnCallbackLimit = maxLength;
+      this->learnCallbackBuffer = (int*) realloc (this->learnCallbackBuffer, (1+maxLength)*sizeof(int));
+      this->learnCallback = learn;
+    }
+
     
     /**
      * Clone function
@@ -545,7 +564,7 @@
 inline void     Solver::clearInterrupt(){ asynch_interrupt = false; }
 inline void     Solver::budgetOff(){ conflict_budget = propagation_budget = -1; }
 inline bool     Solver::withinBudget() const {
-    return !asynch_interrupt &&
+    return !asynch_interrupt && (termCallback == NULL || 0 == termCallback(termCallbackState)) &&
            (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
            (propagation_budget < 0 || propagations < (uint64_t)propagation_budget); }
 
